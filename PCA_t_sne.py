import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import openml
import os
import mlflow
import plotly.express as px
import shutil
import time
import datetime
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from mlflow.tracking import MlflowClient
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import calinski_harabasz_score, davies_bouldin_score
from sklearn.datasets import make_blobs
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split 



def ly_thuyet_PCA(): 
    st.header("üìñ L√Ω thuy·∫øt v·ªÅ PCA")
    st.markdown(" ### 1Ô∏è‚É£ PCA l√† g√¨?")
    st.write("PCA (Principal Component Analysis) l√† m·ªôt k·ªπ thu·∫≠t ph√¢n t√≠ch d·ªØ li·ªáu d√πng ƒë·ªÉ gi·∫£m s·ªë chi·ªÅu (dimension reduction) trong d·ªØ li·ªáu, gi√∫p t√¨m ra c√°c y·∫øu t·ªë quan tr·ªçng nh·∫•t (c√°c th√†nh ph·∫ßn ch√≠nh) trong m·ªôt t·∫≠p d·ªØ li·ªáu c√≥ nhi·ªÅu chi·ªÅu. M·ª•c ti√™u c·ªßa PCA l√† gi·∫£m s·ªë l∆∞·ª£ng c√°c bi·∫øn ƒë·∫ßu v√†o trong khi v·∫´n gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin trong d·ªØ li·ªáu.")
    image_url = "https://machinelearningcoban.com/assets/27_pca/pca_var0.png"
    article_url = "https://machinelearningcoban.com/2017/06/15/pca/"
    st.markdown(
        f"""
        <div style="text-align: center;">
            <a href="{article_url}" target="_blank">
                <img src="{image_url}" width="200">
            </a>
            <p style="font-size: 14px; color: gray;"></p>
        </div>
        """,
        unsafe_allow_html=True
    ) 
    st.markdown(" ### 2Ô∏è‚É£ √Ω t∆∞·ªüng") 
    st.write("""1. **Lo·∫°i b·ªè th√†nh ph·∫ßn v·ªõi ph∆∞∆°ng sai nh·ªè**: Trong PCA, c√°c th√†nh ph·∫ßn c√≥ ph∆∞∆°ng sai nh·ªè bi·ªÉu th·ªã chi·ªÅu d·ªØ li·ªáu m√† s·ª± thay ƒë·ªïi kh√¥ng ƒë√°ng k·ªÉ. Do ƒë√≥, ta c√≥ th·ªÉ lo·∫°i b·ªè c√°c th√†nh ph·∫ßn n√†y ƒë·ªÉ gi·∫£m chi·ªÅu d·ªØ li·ªáu m√† kh√¥ng m·∫•t th√¥ng tin quan tr·ªçng.""")
    image_url = "https://machinelearningcoban.com/assets/27_pca/pca_diagvar.png"
    article_url = "https://machinelearningcoban.com/2017/06/15/pca/"
    st.markdown(
        f"""
        <div style="text-align: center;">
            <a href="{article_url}" target="_blank">
                <img src="{image_url}" width="300">
            </a>
            <p style="font-size: 14px; color: gray;"></p>
        </div>
        """,
        unsafe_allow_html=True
    ) 
    st.write("""2. **Xoay d·ªØ li·ªáu ƒë·ªÉ tƒÉng ph∆∞∆°ng sai**: PCA "xoay" d·ªØ li·ªáu sao cho c√°c th√†nh ph·∫ßn ch√≠nh c√≥ ph∆∞∆°ng sai l·ªõn nh·∫•t. ƒêi·ªÅu n√†y gi√∫p ch·ªçn ra c√°c chi·ªÅu d·ªØ li·ªáu quan tr·ªçng nh·∫•t, gi·∫£m nhi·ªÖu v√† t·ªëi ∆∞u h√≥a kh√¥ng gian d·ªØ li·ªáu.""")
    image_path = "rotateTheImagePCA.jpeg"
    # Hi·ªÉn th·ªã ·∫£nh s·ª≠ d·ª•ng Streamlit
    st.image(image_path)

    # URL b√†i vi·∫øt
    article_url = "https://setosa.io/ev/principal-component-analysis/"

    # HTML ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh v√† li√™n k·∫øt b√†i vi·∫øt
    st.markdown(
        f"""
        <div style="text-align: center;">
            <a href="{article_url}" target="_blank">
                <img src="{image_path}" width="300">
            </a>
            <p style="font-size: 14px; color: gray;">ngu·ªìn ·∫£nh</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.markdown(" ### 3Ô∏è‚É£ Thu·∫≠t to√°n PCA")
    st.markdown(" ##### 1.T√¨m ƒëi·ªÉm trung t√¢m (Mean Vector)")
    st.markdown("""
    Tr∆∞·ªõc ti√™n, t√≠nh gi√° tr·ªã trung b√¨nh c·ªßa t·ª´ng ƒë·∫∑c tr∆∞ng (feature) trong t·∫≠p d·ªØ li·ªáu.
    Vector trung b√¨nh n√†y gi√∫p x√°c ƒë·ªãnh "trung t√¢m" c·ªßa d·ªØ li·ªáu. C√¥ng th·ª©c t√≠nh trung b√¨nh:
    """)
    st.latex(r"""
    \mu = \frac{1}{n} \sum_{i=1}^{n} x_i
    """)
    st.markdown("""
    Trong ƒë√≥:
    - \(n\) l√† s·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu.
    - \(x_i\) l√† t·ª´ng ƒëi·ªÉm d·ªØ li·ªáu.
    """)
    image_path = "img1.png"
    # Hi·ªÉn th·ªã ·∫£nh s·ª≠ d·ª•ng Streamlit
    st.image(image_path)

    # URL b√†i vi·∫øt
    article_url = "https://machinelearningcoban.com/2017/06/15/pca/"

    # HTML ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh v√† li√™n k·∫øt b√†i vi·∫øt
    st.markdown(
        f"""
        <div style="text-align: center;">
            <a href="{article_url}" target="_blank">
                <img src="{image_path}" width="300">
            </a>
            <p style="font-size: 14px; color: gray;">ngu·ªìn ·∫£nh</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(" ##### 2.D·ªãch chuy·ªÉn d·ªØ li·ªáu v·ªÅ g·ªëc t·ªça ƒë·ªô")
    st.markdown("""
    ƒê·ªÉ ƒë·∫£m b·∫£o ph√¢n t√≠ch ch√≠nh x√°c h∆°n, ta d·ªãch chuy·ªÉn d·ªØ li·ªáu sao cho trung t√¢m c·ªßa n√≥ n·∫±m t·∫°i g·ªëc t·ªça ƒë·ªô b·∫±ng c√°ch tr·ª´ ƒëi vector trung b√¨nh:
    """)
    st.latex(r"""
    X_{norm} = X - \mu
    """)
    st.markdown("Khi ƒë√≥, d·ªØ li·ªáu s·∫Ω c√≥ gi√° tr·ªã trung b√¨nh b·∫±ng 0.")
    mage_path = "img2.png"
    # Hi·ªÉn th·ªã ·∫£nh s·ª≠ d·ª•ng Streamlit
    st.image(image_path)

    # URL b√†i vi·∫øt
    article_url = "https://machinelearningcoban.com/2017/06/15/pca/"

    # HTML ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh v√† li√™n k·∫øt b√†i vi·∫øt
    st.markdown(
        f"""
        <div style="text-align: center;">
            <a href="{article_url}" target="_blank">
                <img src="{image_path}" width="300">
            </a>
            <p style="font-size: 14px; color: gray;">ngu·ªìn ·∫£nh</p>
        </div>
        """,
        unsafe_allow_html=True
    )


    st.markdown(" ##### 3.T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai (Covariance Matrix)")
    st.markdown("""
    Ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai gi√∫p ƒëo l∆∞·ªùng m·ª©c ƒë·ªô bi·∫øn thi√™n gi·ªØa c√°c ƒë·∫∑c tr∆∞ng:
    """)
    st.latex(r"""
    C = \frac{1}{n} X_{norm}^T X_{norm}
    """)
    st.markdown("""
    √ù nghƒ©a:
    - N·∫øu ph·∫ßn t·ª≠ \( C_{ij} \) c√≥ gi√° tr·ªã l·ªõn $\rightarrow$ Hai ƒë·∫∑c tr∆∞ng \(i\) v√† \(j\) c√≥ m·ªëi t∆∞∆°ng quan m·∫°nh.
    - N·∫øu \( C_{ij} \) g·∫ßn 0 $\rightarrow$ Hai ƒë·∫∑c tr∆∞ng kh√¥ng li√™n quan nhi·ªÅu.
    """)

    st.markdown(" ##### 4.T√¨m c√°c h∆∞·ªõng quan tr·ªçng nh·∫•t (Eigenvalues & Eigenvectors)")
    st.markdown("""
    T√≠nh tr·ªã ri√™ng (eigenvalues) v√† vector ri√™ng (eigenvectors) t·ª´ ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai:
    """)
    st.latex(r"""
    C v = \lambda v
    """)
    st.markdown("""
    Trong ƒë√≥:
    - \(v\) l√† vector ri√™ng (eigenvector) - ƒë·∫°i di·ªán cho c√°c h∆∞·ªõng ch√≠nh c·ªßa d·ªØ li·ªáu.
    - \(\lambda\) l√† tr·ªã ri√™ng (eigenvalue) - th·ªÉ hi·ªán ƒë·ªô quan tr·ªçng c·ªßa t·ª´ng h∆∞·ªõng.
    Vector ri√™ng c√≥ tr·ªã ri√™ng l·ªõn h∆°n s·∫Ω mang nhi·ªÅu th√¥ng tin quan tr·ªçng h∆°n.
    """)

    st.markdown(" ##### 5.Ch·ªçn s·ªë chi·ªÅu m·ªõi v√† t·∫°o kh√¥ng gian con")
    st.markdown("""
    Ch·ªçn \(K\) vector ri√™ng t∆∞∆°ng ·ª©ng v·ªõi \(K\) tr·ªã ri√™ng l·ªõn nh·∫•t ƒë·ªÉ t·∫°o th√†nh ma tr·∫≠n \(U_K\):
    """)
    st.latex(r"""
    U_K = [v_1, v_2, \dots, v_K]
    """)
    st.markdown("C√°c vector n√†y t·∫°o th√†nh kh√¥ng gian tr·ª±c giao v√† gi√∫p bi·ªÉu di·ªÖn d·ªØ li·ªáu t·ªëi ∆∞u trong kh√¥ng gian m·ªõi.")
    mage_path = "img4.png"
    # Hi·ªÉn th·ªã ·∫£nh s·ª≠ d·ª•ng Streamlit
    st.image(image_path)

    # URL b√†i vi·∫øt
    article_url = "https://machinelearningcoban.com/2017/06/15/pca/"

    # HTML ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh v√† li√™n k·∫øt b√†i vi·∫øt
    st.markdown(
        f"""
        <div style="text-align: center;">
            <a href="{article_url}" target="_blank">
                <img src="{image_path}" width="300">
            </a>
            <p style="font-size: 14px; color: gray;">ngu·ªìn ·∫£nh</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(" ##### 6.Chi·∫øu d·ªØ li·ªáu v√†o kh√¥ng gian m·ªõi")
    st.markdown("""
    Bi·ªÉu di·ªÖn d·ªØ li·ªáu trong h·ªá tr·ª•c m·ªõi b·∫±ng c√°ch nh√¢n d·ªØ li·ªáu chu·∫©n h√≥a v·ªõi ma tr·∫≠n \(U_K\):
    """)
    st.latex(r"""
    X_{new} = X_{norm} U_K
    """)
    st.markdown("D·ªØ li·ªáu m·ªõi \(X_{new}\) c√≥ s·ªë chi·ªÅu √≠t h∆°n nh∆∞ng v·∫´n gi·ªØ l·∫°i th√¥ng tin quan tr·ªçng.")

    mage_path = "img5.png"
    # Hi·ªÉn th·ªã ·∫£nh s·ª≠ d·ª•ng Streamlit
    st.image(image_path)

    # URL b√†i vi·∫øt
    article_url = "https://machinelearningcoban.com/2017/06/15/pca/"

    # HTML ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh v√† li√™n k·∫øt b√†i vi·∫øt
    st.markdown(
    f"""
    <div style="text-align: center;">
        <a href="{article_url}" target="_blank">
            <img src="{image_path}" width="300">
        </a>
        <p style="font-size: 14px; color: gray;">Ngu·ªìn ·∫£nh</p>
    </div>
    """,
    unsafe_allow_html=True
    )

    st.markdown(" ##### 7.D·ªØ li·ªáu m·ªõi")
    st.markdown("""
    D·ªØ li·ªáu m·ªõi \(X_{new}\) l√† t·ªça ƒë·ªô c·ªßa c√°c ƒëi·ªÉm trong kh√¥ng gian m·ªõi, v·ªõi c√°c th√†nh ph·∫ßn ch√≠nh l√†m tr·ª•c m·ªõi.
    """)
    st.markdown("## 4Ô∏è‚É£ Minh h·ªça thu g·ªçn chi·ªÅu b·∫±ng PCA")

    # Tham s·ªë ƒëi·ªÅu ch·ªânh v·ªõi tooltip
    num_samples = st.slider("S·ªë ƒëi·ªÉm d·ªØ li·ªáu üü¢", 100, 1000, 300, step=50, help="S·ªë l∆∞·ª£ng ƒëi·ªÉm d·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch PCA. Gi√° tr·ªã c√†ng l·ªõn, d·ªØ li·ªáu c√†ng phong ph√∫ nh∆∞ng c≈©ng c√≥ th·ªÉ l√†m tƒÉng th·ªùi gian x·ª≠ l√Ω.")
    num_features = st.slider("S·ªë chi·ªÅu ban ƒë·∫ßu üîµ", 3, 10, 3, help="S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (features) ban ƒë·∫ßu c·ªßa d·ªØ li·ªáu. PCA s·∫Ω gi√∫p gi·∫£m s·ªë chi·ªÅu n√†y trong khi v·∫´n gi·ªØ l·∫°i t·ªëi ƒëa th√¥ng tin quan tr·ªçng.")
    num_clusters = st.slider("S·ªë c·ª•m üî¥", 2, 5, 3, help="S·ªë l∆∞·ª£ng nh√≥m (clusters) trong d·ªØ li·ªáu. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o th√†nh c√°c c·ª•m tr∆∞·ªõc khi √°p d·ª•ng PCA.")

    # Gi·ªõi h·∫°n s·ªë th√†nh ph·∫ßn PCA h·ª£p l·ªá
    max_components = max(2, num_features)
    n_components = st.slider("S·ªë th√†nh ph·∫ßn PCA üü£", 2, max_components, min(2, max_components), help="S·ªë th√†nh ph·∫ßn ch√≠nh sau khi gi·∫£m chi·ªÅu d·ªØ li·ªáu b·∫±ng PCA. Gi√° tr·ªã nh·ªè h∆°n s·ªë chi·ªÅu ban ƒë·∫ßu nh∆∞ng v·∫´n gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin quan tr·ªçng.")

    # Th√™m n√∫t Reset v√† Th·ª±c hi·ªán PCA v·ªõi icon
    if st.button("üîÑ Reset"):
        st.rerun()

    if st.button("üìä Th·ª±c hi·ªán PCA"):
        # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n
        X, y = make_blobs(n_samples=num_samples, centers=num_clusters, n_features=num_features, random_state=42)

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # √Åp d·ª•ng PCA
        pca = PCA(n_components=n_components)
        X_pca = pca.fit_transform(X_scaled)

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = plt.figure(figsize=(12, 6))
        if num_features == 3:
            ax = fig.add_subplot(121, projection='3d')
            ax.scatter(X_scaled[:, 0], X_scaled[:, 1], X_scaled[:, 2], c=y, cmap='viridis', alpha=0.6)
            ax.set_title('D·ªØ li·ªáu ban ƒë·∫ßu (3D)')
            ax.set_xlabel('Feature 1')
            ax.set_ylabel('Feature 2')
            ax.set_zlabel('Feature 3')
        else:
            ax = fig.add_subplot(121)
            scatter = ax.scatter(X_scaled[:, 0], X_scaled[:, 1], c=y, cmap='viridis', alpha=0.6)
            ax.set_title(f'D·ªØ li·ªáu ban ƒë·∫ßu ({num_features}D, ch·ªâ hi·ªÉn th·ªã 2 tr·ª•c)')
            ax.set_xlabel('Feature 1')
            ax.set_ylabel('Feature 2')
            plt.colorbar(scatter, ax=ax, label='Cluster Label')

        ax2 = fig.add_subplot(122)
        if n_components > 1:
            scatter = ax2.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', alpha=0.6)
            ax2.set_xlabel('Principal Component 1')
            ax2.set_ylabel('Principal Component 2')
        else:
            ax2.scatter(X_pca[:, 0], np.zeros_like(X_pca[:, 0]), c=y, cmap='viridis', alpha=0.6)
            ax2.set_xlabel('Principal Component 1')
            ax2.set_yticks([])
        ax2.set_title(f'D·ªØ li·ªáu sau PCA ({n_components}D)')
        plt.colorbar(scatter, ax=ax2, label='Cluster Label')

        st.pyplot(fig)


def ly_thuyet_tSne():
    # Ti√™u ƒë·ªÅ ch√≠nh
    st.title("üî¢ T·ªïng quan v·ªÅ t-SNE")

    st.write("""
    **t-SNE (t-Distributed Stochastic Neighbor Embedding)** l√† m·ªôt thu·∫≠t to√°n **gi·∫£m chi·ªÅu d·ªØ li·ªáu**, 
    gi√∫p **tr·ª±c quan h√≥a d·ªØ li·ªáu cao chi·ªÅu** trong **kh√¥ng gian th·∫•p chi·ªÅu** b·∫±ng c√°ch **b·∫£o to√†n c·∫•u tr√∫c c·ª•c b·ªô** gi·ªØa c√°c ƒëi·ªÉm d·ªØ li·ªáu.
    """)

    # T√≥m t·∫Øt √Ω t∆∞·ªüng
    st.header("üîΩ √ù t∆∞·ªüng ch√≠nh")

    st.markdown("""
    - **M·ª•c ti√™u ch√≠nh**: Gi·∫£m chi·ªÅu d·ªØ li·ªáu t·ª´ kh√¥ng gian cao chi·ªÅu xu·ªëng 2D ho·∫∑c 3D m√† v·∫´n **b·∫£o to√†n c·∫•u tr√∫c c·ª•c b·ªô**.
    - **C√°ch ho·∫°t ƒë·ªông**:
        1. **Chuy·ªÉn ƒë·ªïi kho·∫£ng c√°ch th√†nh x√°c su·∫•t**:
            - Trong **kh√¥ng gian cao chi·ªÅu**, t-SNE s·ª≠ d·ª•ng **ph√¢n ph·ªëi Gaussian** ƒë·ªÉ ƒëo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c ƒëi·ªÉm d·ªØ li·ªáu.
            - Trong **kh√¥ng gian th·∫•p chi·ªÅu**, t-SNE s·ª≠ d·ª•ng **ph√¢n ph·ªëi t-Student** ƒë·ªÉ gi·∫£m t√°c ƒë·ªông c·ªßa **outliers**.
        2. **T·ªëi ∆∞u h√≥a b·∫±ng KL-Divergence**:
            - ƒêi·ªÅu ch·ªânh v·ªã tr√≠ c√°c ƒëi·ªÉm trong kh√¥ng gian nh√∫ng sao cho **ph√¢n ph·ªëi x√°c su·∫•t** gi·ªëng nh·∫•t v·ªõi kh√¥ng gian g·ªëc.
            - S·ª≠ d·ª•ng **gradient descent** ƒë·ªÉ c·∫≠p nh·∫≠t t·ªça ƒë·ªô c√°c ƒëi·ªÉm.
    """)

    # Hi·ªÉn th·ªã c√¥ng th·ª©c to√°n h·ªçc
    st.header("üìä C√¥ng th·ª©c To√°n h·ªçc c·ªßa t-SNE")

    st.markdown("**1Ô∏è‚É£ X√°c su·∫•t trong kh√¥ng gian cao chi·ªÅu:**")
    st.latex(r"""
    p_{j|i} = \frac{\exp(-\|x_i - x_j\|^2 / 2\sigma^2)}{\sum_{k \neq i} \exp(-\|x_i - x_k\|^2 / 2\sigma^2)}
    """)
    st.write("""
    - \( \sigma \) l√† ƒë·ªô l·ªách chu·∫©n ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô "m·ªü r·ªông" c·ªßa Gaussian.
    - \( p_{j|i} \) l√† x√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán, nghƒ©a l√† m·ª©c ƒë·ªô ƒëi·ªÉm \( x_j \) l√† h√†ng x√≥m c·ªßa \( x_i \).
    """)

    st.markdown("**2Ô∏è‚É£ X√°c su·∫•t trong kh√¥ng gian th·∫•p chi·ªÅu:**")
    st.latex(r"""
    q_{ij} = \frac{(1 + \|y_i - y_j\|^2)^{-1}}{\sum_{k \neq l} (1 + \|y_k - y_l\|^2)^{-1}}
    """)
    st.write("""
    - \( y_i \) l√† ƒëi·ªÉm d·ªØ li·ªáu sau khi chi·∫øu xu·ªëng kh√¥ng gian th·∫•p chi·ªÅu.
    - Ph√¢n ph·ªëi t-Student c√≥ ƒëu√¥i d√†i h∆°n, gi√∫p ngƒÉn vi·ªác outliers ·∫£nh h∆∞·ªüng qu√° m·∫°nh ƒë·∫øn v·ªã tr√≠ c√°c ƒëi·ªÉm.
    """)

    st.markdown("**3Ô∏è‚É£ T·ªëi ∆∞u h√≥a b·∫±ng KL-Divergence:**")
    st.latex(r"""
    KL(P \parallel Q) = \sum_{i \neq j} p_{ij} \log \frac{p_{ij}}{q_{ij}}
    """)
    st.write("""
    - M·ª•c ti√™u c·ªßa t-SNE l√† gi·∫£m thi·ªÉu KL-Divergence b·∫±ng c√°ch s·ª≠ d·ª•ng **gradient descent** ƒë·ªÉ t·ªëi ∆∞u h√≥a v·ªã tr√≠ c√°c ƒëi·ªÉm.
    """)

    st.success("‚úÖ t-SNE gi√∫p tr·ª±c quan h√≥a d·ªØ li·ªáu ph·ª©c t·∫°p m·ªôt c√°ch hi·ªáu qu·∫£!") 

    # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
    st.title("üìâ Minh h·ªça thu g·ªçn chi·ªÅu b·∫±ng t-SNE")

    # **B∆∞·ªõc 1: Ch·ªçn tham s·ªë cho d·ªØ li·ªáu**
    num_samples = st.slider("S·ªë ƒëi·ªÉm d·ªØ li·ªáu", 100, 1000, 300, step=50, key="num_samples", help="S·ªë l∆∞·ª£ng ƒëi·ªÉm d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o ra cho vi·ªác gi·∫£m chi·ªÅu. TƒÉng s·ªë l∆∞·ª£ng ƒëi·ªÉm c√≥ th·ªÉ l√†m t-SNE ch·∫°y l√¢u h∆°n.")
    num_features = 3  # Hi·ªÉn th·ªã 3D ban ƒë·∫ßu
    num_clusters = st.slider("S·ªë c·ª•m", 2, 5, 3, key="num_clusters", help="S·ªë l∆∞·ª£ng c·ª•m d·ªØ li·ªáu trong kh√¥ng gian ban ƒë·∫ßu. M·ªói c·ª•m ƒë·∫°i di·ªán cho m·ªôt nh√≥m d·ªØ li·ªáu kh√°c nhau.")
    perplexity = st.slider("Perplexity", 5, 50, 30, key="perplexity", help="Tham s·ªë quy·∫øt ƒë·ªãnh c√°ch ph√¢n b·ªë ƒëi·ªÉm trong kh√¥ng gian t-SNE. Gi√° tr·ªã th·∫•p c√≥ th·ªÉ l√†m m·∫•t c·∫•u tr√∫c d·ªØ li·ªáu, trong khi gi√° tr·ªã cao c√≥ th·ªÉ l√†m m·ªù ƒëi c√°c c·ª•m.")

    # **B∆∞·ªõc 2: Th√™m n√∫t Reset ƒë·ªÉ l√†m m·ªõi giao di·ªán**
    if st.button("üîÑ Reset", key="reset_button", help="Nh·∫•n ƒë·ªÉ l√†m m·ªõi to√†n b·ªô giao di·ªán v√† thi·∫øt l·∫≠p l·∫°i c√°c tham s·ªë v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh."):
        st.rerun()

    # **B∆∞·ªõc 3: Nh·∫•n n√∫t ƒë·ªÉ th·ª±c hi·ªán thu·∫≠t to√°n**
    if st.button("üìä Th·ª±c hi·ªán", key="process_button", help="Nh·∫•n ƒë·ªÉ t·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n v√† √°p d·ª•ng t-SNE ƒë·ªÉ gi·∫£m chi·ªÅu xu·ªëng 2D, gi√∫p tr·ª±c quan h√≥a d·ªØ li·ªáu d·ªÖ d√†ng h∆°n."):
        st.write("### üîπ T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p")
        # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n v·ªõi s·ªë c·ª•m v√† s·ªë chi·ªÅu ƒë√£ ch·ªçn
        X, y = make_blobs(n_samples=num_samples, centers=num_clusters, n_features=num_features, random_state=42)
        st.write(f"‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu v·ªõi {num_samples} ƒëi·ªÉm, {num_features} chi·ªÅu v√† {num_clusters} c·ª•m.")
        
        # **Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu (3D)**
        st.write("### üîπ D·ªØ li·ªáu ban ƒë·∫ßu (3D)")
        fig = plt.figure(figsize=(10, 4))
        ax = fig.add_subplot(121, projection='3d')
        ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y, cmap='viridis', edgecolors='k', alpha=0.7)
        ax.set_xlabel("Feature 1")
        ax.set_ylabel("Feature 2")
        ax.set_zlabel("Feature 3")
        ax.set_title("D·ªØ li·ªáu ban ƒë·∫ßu (3D)")
        
        # **Gi·∫£m chi·ªÅu b·∫±ng t-SNE (2D)**
        tsne = TSNE(n_components=2, perplexity=perplexity, random_state=42)
        X_tsne = tsne.fit_transform(X)
        
        ax2 = fig.add_subplot(122)
        scatter = ax2.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y, cmap='viridis', edgecolors='k', alpha=0.7)
        ax2.set_xlabel("t-SNE Component 1")
        ax2.set_ylabel("t-SNE Component 2")
        ax2.set_title("D·ªØ li·ªáu sau t-SNE (2D)")
        plt.colorbar(scatter, label='Cluster Label')
        
        st.pyplot(fig)


def data(): 
    st.title("üìö T·∫≠p D·ªØ Li·ªáu MNIST")
    
    st.markdown("""
    T·∫≠p d·ªØ li·ªáu **MNIST (Modified National Institute of Standards and Technology)** l√† m·ªôt trong nh·ªØng b·ªô d·ªØ li·ªáu n·ªïi b·∫≠t v√† ph·ªï bi·∫øn nh·∫•t trong lƒ©nh v·ª±c h·ªçc m√°y v√† nh·∫≠n d·∫°ng h√¨nh ·∫£nh. ƒê√¢y l√† t·∫≠p d·ªØ li·ªáu bao g·ªìm c√°c h√¨nh ·∫£nh c·ªßa c√°c ch·ªØ s·ªë vi·∫øt tay t·ª´ 0 ƒë·∫øn 9, ƒë∆∞·ª£c thu th·∫≠p ƒë·ªÉ th·ª≠ nghi·ªám c√°c thu·∫≠t to√°n ph√¢n lo·∫°i v√† nh·∫≠n d·∫°ng m·∫´u.
    
    ![Mnist-dataset](https://datasets.activeloop.ai/wp-content/uploads/2019/12/MNIST-handwritten-digits-dataset-visualized-by-Activeloop.webp)
                               

    ## 1. T·ªïng Quan v·ªÅ MNIST:
    MNIST g·ªìm hai ph·∫ßn ch√≠nh:
    
    - **D·ªØ li·ªáu hu·∫•n luy·ªán (Training Set)**: G·ªìm 60.000 h√¨nh ·∫£nh.
    - **D·ªØ li·ªáu ki·ªÉm tra (Test Set)**: G·ªìm 10.000 h√¨nh ·∫£nh.
    
    M·ªói h√¨nh ·∫£nh trong b·ªô d·ªØ li·ªáu c√≥ k√≠ch th∆∞·ªõc l√† 28x28 pixel v√† bi·ªÉu di·ªÖn m·ªôt trong 10 ch·ªØ s·ªë (0 ƒë·∫øn 9). D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a, v·ªõi c√°c h√¨nh ·∫£nh ƒë∆∞·ª£c cƒÉn ch·ªânh v√† c√≥ n·ªÅn tr·∫Øng, gi√∫p vi·ªác x·ª≠ l√Ω tr·ªü n√™n ƒë∆°n gi·∫£n h∆°n.
    
    ## 2. M·ª•c Ti√™u S·ª≠ D·ª•ng T·∫≠p D·ªØ Li·ªáu MNIST:
    MNIST ch·ªß y·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán v√† ki·ªÉm tra c√°c thu·∫≠t to√°n ph√¢n lo·∫°i. C√°c m·ª•c ti√™u ch√≠nh khi l√†m vi·ªác v·ªõi MNIST bao g·ªìm:
    
    - **Ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay**: D·ª± ƒëo√°n ch·ªØ s·ªë t∆∞∆°ng ·ª©ng v·ªõi m·ªói h√¨nh ·∫£nh.
    - **Ki·ªÉm th·ª≠ m√¥ h√¨nh h·ªçc m√°y**: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra hi·ªáu qu·∫£ c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y, t·ª´ c√°c thu·∫≠t to√°n c·ªï ƒëi·ªÉn nh∆∞ K-Nearest Neighbors (KNN), Support Vector Machines (SVM) ƒë·∫øn c√°c m√¥ h√¨nh h·ªçc s√¢u nh∆∞ m·∫°ng n∆°-ron t√≠ch ch·∫≠p (CNN).
    - **Ti·ªÅn x·ª≠ l√Ω v√† h·ªçc m√°y c∆° b·∫£n**: ƒê√¢y l√† m·ªôt b·ªô d·ªØ li·ªáu tuy·ªát v·ªùi ƒë·ªÉ hi·ªÉu r√µ c√°c quy tr√¨nh ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v√† c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa c√°c m√¥ h√¨nh ph√¢n lo·∫°i.
    
    ## 3. C·∫•u Tr√∫c D·ªØ Li·ªáu MNIST:
    M·ªói h√¨nh ·∫£nh trong b·ªô d·ªØ li·ªáu MNIST c√≥ k√≠ch th∆∞·ªõc 28x28 pixel, t·ª©c l√† m·ªói h√¨nh ·∫£nh s·∫Ω c√≥ 784 gi√° tr·ªã s·ªë nguy√™n, t∆∞∆°ng ·ª©ng v·ªõi ƒë·ªô s√°ng c·ªßa t·ª´ng pixel. T·∫•t c·∫£ c√°c gi√° tr·ªã n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh. D·ªØ li·ªáu n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c t√°c v·ª• nh∆∞:
    
    - **Ph√¢n lo·∫°i h√¨nh ·∫£nh**: C√°c m√¥ h√¨nh h·ªçc m√°y c√≥ th·ªÉ h·ªçc c√°ch ph√¢n lo·∫°i c√°c h√¨nh ·∫£nh th√†nh c√°c nh√≥m ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.
    - **Ti·ªÅn x·ª≠ l√Ω h√¨nh ·∫£nh**: Vi·ªác chu·∫©n h√≥a d·ªØ li·ªáu v√† √°p d·ª•ng c√°c k·ªπ thu·∫≠t ti·ªÅn x·ª≠ l√Ω gi√∫p c·∫£i thi·ªán hi·ªáu qu·∫£ c·ªßa m√¥ h√¨nh.
    
    ## 4. ·ª®ng D·ª•ng C·ªßa T·∫≠p D·ªØ Li·ªáu MNIST:
    - **Nh·∫≠n d·∫°ng ch·ªØ vi·∫øt tay**: ƒê√¢y l√† ·ª©ng d·ª•ng ph·ªï bi·∫øn nh·∫•t c·ªßa MNIST.
    - **H·ªçc s√¢u v√† ph√¢n lo·∫°i h√¨nh ·∫£nh**: C√°c m√¥ h√¨nh h·ªçc s√¢u, ƒë·∫∑c bi·ªát l√† m·∫°ng n∆°-ron t√≠ch ch·∫≠p, ƒë∆∞·ª£c hu·∫•n luy·ªán v·ªõi b·ªô d·ªØ li·ªáu n√†y ƒë·ªÉ ph√¢n lo·∫°i ch·ªØ s·ªë.
    """)


def train_model():
    st.title("üìâ Gi·∫£m chi·ªÅu d·ªØ li·ªáu MNIST v·ªõi PCA & t-SNE")
    
    mlflow_input()

    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if "run_name" not in st.session_state:
        st.session_state["run_name"] = "default_run"
    if "mlflow_url" not in st.session_state:
        st.session_state["mlflow_url"] = ""

    # Nh·∫≠p t√™n th√≠ nghi·ªám
    st.session_state["run_name"] = st.text_input("üîñ ƒê·∫∑t t√™n th√≠ nghi·ªám:", value=st.session_state["run_name"])

    # Load d·ªØ li·ªáu
    Xmt = np.load("X.npy")
    ymt = np.load("y.npy")
    X = Xmt.reshape(Xmt.shape[0], -1) 
    y = ymt.reshape(-1) 

    # T√πy ch·ªçn thu·∫≠t to√°n
    method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu", ["PCA", "t-SNE"])
    n_components = st.slider("Ch·ªçn s·ªë chi·ªÅu gi·∫£m xu·ªëng", 2, 50, 2)

    # Ch·ªçn c√°ch tr·ª±c quan h√≥a
    visualization_dim = st.radio("Ch·ªçn c√°ch tr·ª±c quan h√≥a", ["2D", "3D"])
    
    # N·∫øu ch·ªçn t-SNE, th√™m t√πy ch·ªçn Perplexity
    perplexity = 30
    if method == "t-SNE":
        perplexity = st.slider("Ch·ªçn Perplexity", 5, 50, 30, step=5)

    # Thanh tr∆∞·ª£t ch·ªçn s·ªë l∆∞·ª£ng m·∫´u s·ª≠ d·ª•ng t·ª´ MNIST
    num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u MNIST s·ª≠ d·ª•ng:", 1000, 60000, 5000, step=1000)

    # Gi·ªõi h·∫°n s·ªë m·∫´u ƒë·ªÉ tƒÉng t·ªëc
    X_subset, y_subset = X[:num_samples], y[:num_samples]

    if st.button("üöÄ Ch·∫°y gi·∫£m chi·ªÅu"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            progress_bar = st.progress(0)  # Kh·ªüi t·∫°o thanh ti·∫øn tr√¨nh
            status_text = st.empty()  # √î hi·ªÉn th·ªã ph·∫ßn trƒÉm ti·∫øn tr√¨nh

            mlflow.start_run(run_name=st.session_state["run_name"])
            mlflow.log_param("experiment_name", st.session_state["run_name"])
            mlflow.log_param("method", method)
            mlflow.log_param("n_components", n_components)
            mlflow.log_param("num_samples", num_samples)
            mlflow.log_param("original_dim", X.shape[1])

            if method == "t-SNE":
                mlflow.log_param("perplexity", perplexity)
                reducer = TSNE(n_components=n_components, perplexity=perplexity, random_state=42)
            else:
                reducer = PCA(n_components=n_components)

            start_time = time.time()

            # Hu·∫•n luy·ªán m√¥ h√¨nh v√† c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
            for i in range(1, 101):
                time.sleep(0.02)  # M√¥ ph·ªèng th·ªùi gian x·ª≠ l√Ω
                progress_bar.progress(i)  # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                status_text.text(f"üîÑ Ti·∫øn ƒë·ªô: {i}%")  # Hi·ªÉn th·ªã ph·∫ßn trƒÉm

                if i == 50:  # B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán khi ti·∫øn tr√¨nh ƒë·∫°t 50%
                    X_reduced = reducer.fit_transform(X_subset)

            elapsed_time = time.time() - start_time
            mlflow.log_metric("elapsed_time", elapsed_time)

            if method == "PCA":
                explained_variance = np.sum(reducer.explained_variance_ratio_)
                mlflow.log_metric("explained_variance_ratio", explained_variance)
            elif method == "t-SNE" and hasattr(reducer, "kl_divergence_"):
                mlflow.log_metric("KL_divergence", reducer.kl_divergence_)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if visualization_dim == "2D" and n_components >= 2:
                fig = px.scatter(x=X_reduced[:, 0], y=X_reduced[:, 1], color=y_subset.astype(str),
                                 title=f"{method} gi·∫£m chi·ªÅu xu·ªëng {n_components}D")
                st.plotly_chart(fig)
            elif visualization_dim == "3D" and n_components >= 3:
                fig = px.scatter_3d(x=X_reduced[:, 0], y=X_reduced[:, 1], z=X_reduced[:, 2],
                                     color=y_subset.astype(str),
                                     title=f"{method} gi·∫£m chi·ªÅu xu·ªëng {n_components}D")
                st.plotly_chart(fig)
            else:
                st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã tr·ª±c quan v·ªõi {visualization_dim} khi s·ªë chi·ªÅu = {n_components}!")

            # L∆∞u k·∫øt qu·∫£ v√†o MLflow
            os.makedirs("logs", exist_ok=True)
            np.save(f"logs/{method}_X_reduced.npy", X_reduced)
            mlflow.log_artifact(f"logs/{method}_X_reduced.npy")

            mlflow.end_run()
            st.success(f"‚úÖ ƒê√£ log d·ªØ li·ªáu cho **Train_{st.session_state['run_name']}**!")

            if st.session_state["mlflow_url"]:
                st.markdown(f"### üîó [Truy c·∫≠p MLflow]({st.session_state['mlflow_url']})")
            else:
                st.warning("‚ö†Ô∏è Ch∆∞a c√≥ ƒë∆∞·ªùng link MLflow!")

            progress_bar.empty()  # X√≥a thanh ti·∫øn tr√¨nh sau khi ho√†n t·∫•t
            status_text.empty()  # X√≥a hi·ªÉn th·ªã ph·∫ßn trƒÉm ti·∫øn tr√¨nh



def mlflow_input():
    #st.title("üöÄ MLflow DAGsHub Tracking v·ªõi Streamlit")
    DAGSHUB_USERNAME = "Snxtruc"  # Thay b·∫±ng username c·ªßa b·∫°n
    DAGSHUB_REPO_NAME = "HocMayPython"
    DAGSHUB_TOKEN = "ca4b78ae4dd9d511c1e0c333e3b709b2cd789a19"  # Thay b·∫±ng Access Token c·ªßa b·∫°n

    # ƒê·∫∑t URI MLflow ƒë·ªÉ tr·ªè ƒë·∫øn DagsHub
    mlflow.set_tracking_uri(f"https://dagshub.com/{DAGSHUB_USERNAME}/{DAGSHUB_REPO_NAME}.mlflow")

    # Thi·∫øt l·∫≠p authentication b·∫±ng Access Token
    os.environ["MLFLOW_TRACKING_USERNAME"] = DAGSHUB_USERNAME
    os.environ["MLFLOW_TRACKING_PASSWORD"] = DAGSHUB_TOKEN

    # ƒê·∫∑t th√≠ nghi·ªám MLflow
    mlflow.set_experiment("PCA & t-SNE")   

    st.session_state['mlflow_url'] = f"https://dagshub.com/{DAGSHUB_USERNAME}/{DAGSHUB_REPO_NAME}.mlflow"



def format_time_relative(timestamp_ms):
    """Chuy·ªÉn timestamp milliseconds th√†nh th·ªùi gian d·ªÖ ƒë·ªçc."""
    if timestamp_ms is None:
        return "N/A"
    dt = datetime.datetime.fromtimestamp(timestamp_ms / 1000)
    return dt.strftime("%Y-%m-%d %H:%M:%S")

def display_mlflow_experiments():
    """Hi·ªÉn th·ªã danh s√°ch Runs trong MLflow v·ªõi thanh tr·∫°ng th√°i ti·∫øn tr√¨nh."""
    st.title("üìä MLflow Experiment Viewer")

    # L·∫•y danh s√°ch th√≠ nghi·ªám
    experiment_name = "PCA & t-SNE"
    experiments = mlflow.search_experiments()
    selected_experiment = next((exp for exp in experiments if exp.name == experiment_name), None)

    if not selected_experiment:
        st.error(f"‚ùå Experiment '{experiment_name}' kh√¥ng t·ªìn t·∫°i!")
        return

    st.subheader(f"üìå Experiment: {experiment_name}")
    st.write(f"**Experiment ID:** {selected_experiment.experiment_id}")
    st.write(f"**Tr·∫°ng th√°i:** {'Active' if selected_experiment.lifecycle_stage == 'active' else 'Deleted'}")
    st.write(f"**V·ªã tr√≠ l∆∞u tr·ªØ:** {selected_experiment.artifact_location}")

    # --- üèÉ‚Äç‚ôÇÔ∏è L·∫•y danh s√°ch Runs v·ªõi thanh tr·∫°ng th√°i ---
    st.write("### üîÑ ƒêang t·∫£i danh s√°ch Runs...")
    runs = mlflow.search_runs(experiment_ids=[selected_experiment.experiment_id])

    if runs.empty:
        st.warning("‚ö† Kh√¥ng c√≥ runs n√†o trong experiment n√†y.")
        return

    total_runs = len(runs)
    run_info = []
    
    progress_bar = st.progress(0)  # Thanh ti·∫øn tr√¨nh

    for i, (_, run) in enumerate(runs.iterrows()):
        run_id = run["run_id"]
        run_data = mlflow.get_run(run_id)
        run_tags = run_data.data.tags
        run_name = run_tags.get("mlflow.runName", f"Run {run_id[:8]}")  # T√™n Run
        created_time = format_time_relative(run_data.info.start_time)
        duration = (run_data.info.end_time - run_data.info.start_time) / 1000 if run_data.info.end_time else "ƒêang ch·∫°y"
        source = run_tags.get("mlflow.source.name", "Unknown")

        run_info.append({
            "Run Name": run_name,
            "Run ID": run_id,
            "Created": created_time,
            "Duration (s)": duration if isinstance(duration, str) else f"{duration:.1f}s",
            "Source": source
        })

        # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
        progress_bar.progress(int((i + 1) / total_runs * 100))

    progress_bar.empty()  # X√≥a thanh ti·∫øn tr√¨nh khi ho√†n th√†nh

    # S·∫Øp x·∫øp v√† hi·ªÉn th·ªã b·∫£ng danh s√°ch Runs
    run_info_df = pd.DataFrame(run_info).sort_values(by="Created", ascending=False)
    st.write("### üèÉ‚Äç‚ôÇÔ∏è Danh s√°ch Runs:")
    st.dataframe(run_info_df, use_container_width=True)

    # Ch·ªçn Run t·ª´ dropdown
    run_names = run_info_df["Run Name"].tolist()
    selected_run_name = st.selectbox("üîç Ch·ªçn m·ªôt Run ƒë·ªÉ xem chi ti·∫øt:", run_names)

    # L·∫•y Run ID t∆∞∆°ng ·ª©ng
    selected_run_id = run_info_df.loc[run_info_df["Run Name"] == selected_run_name, "Run ID"].values[0]
    selected_run = mlflow.get_run(selected_run_id)

    # --- üìù ƒê·ªîI T√äN RUN ---
    st.write("### ‚úèÔ∏è ƒê·ªïi t√™n Run")
    new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi:", selected_run_name)
    if st.button("üíæ L∆∞u t√™n m·ªõi"):
        try:
            mlflow.set_tag(selected_run_id, "mlflow.runName", new_run_name)
            st.success(f"‚úÖ ƒê√£ ƒë·ªïi t√™n th√†nh **{new_run_name}**. H√£y t·∫£i l·∫°i trang ƒë·ªÉ th·∫•y thay ƒë·ªïi!")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªïi t√™n: {e}")

    # --- üóëÔ∏è X√ìA RUN ---
    st.write("### ‚ùå X√≥a Run")
    if st.button("üóëÔ∏è X√≥a Run n√†y"):
        try:
            mlflow.delete_run(selected_run_id)
            st.success(f"‚úÖ ƒê√£ x√≥a run **{selected_run_name}**! H√£y t·∫£i l·∫°i trang ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch.")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi x√≥a run: {e}")

    # --- HI·ªÇN TH·ªä CHI TI·∫æT RUN ---
    if selected_run:
        st.subheader(f"üìå Th√¥ng tin Run: {selected_run_name}")
        st.write(f"**Run ID:** {selected_run_id}")
        st.write(f"**Tr·∫°ng th√°i:** {selected_run.info.status}")

        start_time_ms = selected_run.info.start_time
        start_time = datetime.datetime.fromtimestamp(start_time_ms / 1000).strftime("%Y-%m-%d %H:%M:%S") if start_time_ms else "Kh√¥ng c√≥ th√¥ng tin"
        st.write(f"**Th·ªùi gian ch·∫°y:** {start_time}")

        # Hi·ªÉn th·ªã th√¥ng s·ªë ƒë√£ log
        params = selected_run.data.params
        metrics = selected_run.data.metrics

        if params:
            st.write("### ‚öôÔ∏è Parameters:")
            st.json(params)

        if metrics:
            st.write("### üìä Metrics:")
            st.json(metrics)

        # Hi·ªÉn th·ªã model artifact (n·∫øu c√≥)
        model_artifact_path = f"{st.session_state['mlflow_url']}/{selected_experiment.experiment_id}/{selected_run_id}/artifacts/model"
        st.write("### üìÇ Model Artifact:")
        st.write(f"üì• [T·∫£i m√¥ h√¨nh]({model_artifact_path})")
    else:
        st.warning("‚ö† Kh√¥ng t√¨m th·∫•y th√¥ng tin cho run n√†y.")

def PCA_T_sne():
    # Thi·∫øt l·∫≠p CSS ƒë·ªÉ h·ªó tr·ª£ hi·ªÉn th·ªã tabs v·ªõi hi·ªáu ·ª©ng hover v√† thanh cu·ªôn
    st.markdown(
        """
        <style>
        .stTabs [role="tablist"] {
            overflow-x: auto;
            white-space: nowrap;
            display: flex;
            scrollbar-width: thin;
            scrollbar-color: #888 #f0f0f0;
        }
        .stTabs [role="tablist"]::-webkit-scrollbar {
            height: 6px;
        }
        .stTabs [role="tablist"]::-webkit-scrollbar-thumb {
            background-color: #888;
            border-radius: 3px;
        }
        .stTabs [role="tablist"]::-webkit-scrollbar-track {
            background: #f0f0f0;
        }
        .stTabs [role="tab"]:hover {
            background-color: #f0f0f0;
            transition: background-color 0.3s ease-in-out;
        }
        </style>
        """,
        unsafe_allow_html=True
    ) 


    st.title("üñäÔ∏è MNIST PCA & t-SNE App")

    # Ensure the tab names are properly separated
    tab1, tab2, tab3, tab4, tab5= st.tabs([
    "üìò L√Ω thuy·∫øt PCA", 
    "üìò L√Ω thuy·∫øt T-sne", 
    "üìò Review database",  
    "üîÄ Gi·∫£m chi·ªÅu",
    " üöÄ Th√¥ng tin thu g·ªçn chi·ªÅu"
    ])

    with tab1: 
        ly_thuyet_PCA() 

    with tab2:
        ly_thuyet_tSne()

    with tab3: 
        data()    

    with tab4:
        train_model()
    with tab5: 
        display_mlflow_experiments()    

def run(): 
    PCA_T_sne()        

if __name__ == "__main__":
    run()
